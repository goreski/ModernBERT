# Use this YAML to verify that fine-tuning starter script works. Runs on CPU or GPUs (if available).
# From `examples/bert`, run:
#   `composer sequence_classification.py yamls/test/sequence_classification.yaml` (HuggingFace BERT)
#   `composer sequence_classification.py yamls/test/sequence_classification.yaml model.name=mosaic_bert` (Mosaic BERT)

# prajjwal1/bert-tiny, bert-base-uncased, bert-base-uncased

tokenizer_name: bert-base-uncased
max_seq_len: 128

# Run Name
run_name: test

load_path: # (Optionally) provide a composer checkpoint to use for the starting weights

# Dataset
dataset:
  n_samples: 10000
  n_continuous_features: 0
  n_discrete_features: 10
  n_classes: 2
  class_distribution: [0.5, 0.5]
  n_bins: 5
  n_redundant: 0
  n_noisy: 0
  class_sep: 0.1
  textual_discrete: false

# Model
model:
  name: hf_bert
  num_labels: 2
  pretrained_model_name: ${tokenizer_name}
  tokenizer_name: ${tokenizer_name}

# Dataloaders
train_loader:
  split: train
  tokenizer_name: ${tokenizer_name}
  max_seq_len: ${max_seq_len}
  shuffle: true
  drop_last: true
  num_workers: 8
  n_samples: ${dataset.n_samples}
  n_continuous_features: ${dataset.n_continuous_features}
  n_discrete_features: ${dataset.n_discrete_features}
  n_classes: ${dataset.n_classes}
  class_distribution: ${dataset.class_distribution}
  n_bins: ${dataset.n_bins}
  n_redundant: ${dataset.n_redundant}
  n_noisy: ${dataset.n_noisy}
  class_sep: ${dataset.class_sep}
  textual_discrete: ${dataset.textual_discrete}

eval_loader:
  split: validation
  tokenizer_name: ${tokenizer_name}
  max_seq_len: ${max_seq_len}
  shuffle: true
  drop_last: true
  num_workers: 8
  n_samples: ${dataset.n_samples}
  n_continuous_features: ${dataset.n_continuous_features}
  n_discrete_features: ${dataset.n_discrete_features}
  n_classes: ${dataset.n_classes}
  class_distribution: ${dataset.class_distribution}
  n_bins: ${dataset.n_bins}
  n_redundant: ${dataset.n_redundant}
  n_noisy: ${dataset.n_noisy}
  class_sep: ${dataset.class_sep}
  textual_discrete: ${dataset.textual_discrete}

# Optimization
scheduler:
  name: linear_decay_with_warmup
  t_warmup: 0.06dur # Warmup to the full LR for 6% of the training duration
  alpha_f: 0.02 # Linearly decay to 0.02x the full LR by the end of the training duration

optimizer:
  name: decoupled_adamw
  lr: 1.0e-5
  betas:
  - 0.9
  - 0.98
  eps: 1.0e-06
  weight_decay: 1.0e-6

# Training duration and evaluation frequency
max_duration: 10000ba
eval_interval: 1000ba
eval_subset_num_batches: 4 # For code testing, evaluate on a subset of 4 batches
global_train_batch_size: 16

# System
seed: 17
device_eval_microbatch_size: 16
device_train_microbatch_size: 16
precision: fp32

# Logging
progress_bar: true
log_to_console: false
console_log_interval: 1ba

# Optionally log to W&B
loggers:
  wandb: {}

callbacks:
  speed_monitor:
    window_size: 5
  lr_monitor: {}
